// Copyright 2019 CryptoGarage

#ifndef CFD_DLC_INCLUDE_CFDDLC_CFDDLC_UTIL_H_
#define CFD_DLC_INCLUDE_CFDDLC_CFDDLC_UTIL_H_

#include <string>
#include <vector>

#include "cfdcore/cfdcore_key.h"
#include "cfddlc/cfddlc_common.h"
#include "secp256k1.h"  // NOLINT

namespace cfd {
namespace dlc {

using cfd::core::ByteData;
using cfd::core::ByteData256;
using cfd::core::Privkey;
using cfd::core::Pubkey;

/**
 * @brief Cryptographic utility functions useful for setting up a DLC.
 *
 */
class CFD_DLC_EXPORT DlcUtil {
 public:
  /**
   * @brief Get the public key associated with the combined oracle signatures of
   * all the messages for a given outcome.
   *
   * @param oracle_pub_key the public key of the oracle.
   * @param oracle_r_points the set of R points for the event.
   * @param messages the set of messages for the outcome.
   * @return Pubkey the resulting public key.
   */
  static Pubkey GetCommittedKey(const Pubkey& oracle_pub_key,
                                const std::vector<Pubkey>& oracle_r_points,
                                const std::vector<std::string>& messages);

  /**
   * @brief Get the public key to be used in the CET script.
   *
   * @param oracle_pubkey the piublic key of the oracle.
   * @param oracle_r_points the set of R points for the event.
   * @param messages the set of messages for the outcome.
   * @param local_fund_pubkey the local party fund public key.
   * @param local_sweep_pubkey the local party sweep public key.
   * @return Pubkey the resulting public key.
   */
  static Pubkey GetCombinedKey(const Pubkey& oracle_pubkey,
                               const std::vector<Pubkey>& oracle_r_points,
                               const std::vector<std::string> messages,
                               const Pubkey& local_fund_pubkey,
                               const Pubkey& local_sweep_pubkey);

  /**
   * @brief Tweak the fund private key with the oracle signature and the sweep
   * public key to obtain a private key that can create signature matching the
   * public key generated by `GetCombinedKey`.
   *
   * @param oracle_sig the set of signatures from the oracle.
   * @param local_fund_privkey the fund private key to tweak.
   * @param local_sweep_pubkey the sweep public key to use as a tweak.
   * @return Privkey the tweaked private key.
   */
  static Privkey GetTweakedPrivkey(const std::vector<ByteData>& oracle_sig,
                                   const Privkey& local_fund_privkey,
                                   const Pubkey& local_sweep_pubkey);

  /**
   * @brief Create a schnorr signature using the a given private key and nonce.
   *
   * @param oracle_privkey the private key to sign with.
   * @param k_value the nonce to use in the signature generation.
   * @param message the message to sign.
   * @return ByteData256 the resulting signature.
   */
  static ByteData256 SchnorrSign(const Privkey& oracle_privkey,
                                 const Privkey& k_value,
                                 const std::string& message);

  /**
   * @brief Create a schnorr signature using the a given private key and nonce.
   *
   * @param oracle_privkey the private key to sign with.
   * @param k_value the nonce to use in the signature generation.
   * @param message the message to sign.
   * @return ByteData256 the resulting signature.
   */
  static ByteData256 SchnorrSign(const Privkey& oracle_privkey,
                                 const Privkey& k_value,
                                 const ByteData256& message);
  /**
   * @brief Verify a schnorr signature.
   *
   * @param pubkey The public key to verify the signature against.
   * @param nonce the nonce.
   * @param signature the signature to verify.
   * @param message the message that the signature was made for.
   * @return true if the signature is valid.
   * @return false otherwise.
   */
  static bool SchnorrVerify(const Pubkey& pubkey, const Pubkey& nonce,
                            const ByteData256& signature,
                            const std::string& message);

  /**
   * @brief Verify a schnorr signature.
   *
   * @param pubkey The public key to verify the signature against.
   * @param nonce the nonce.
   * @param signature the signature to verify.
   * @param message the message that the signature was made for.
   * @return true if the signature is valid.
   * @return false otherwise.
   */
  static bool SchnorrVerify(const Pubkey& pubkey, const Pubkey& nonce,
                            const ByteData256& signature,
                            const ByteData256& message);

  /**
   * @brief Get the R value for a nonce (K value).
   *
   * @param nonce the K value.
   * @return Pubkey the R value.
   */
  static Pubkey GetSchnorrPublicNonce(const Privkey& nonce);

 private:
  /**
   * @brief Tweak a private key.
   *
   * @param privkey the private key to tweak.
   * @param tweak the tweak.
   * @return Privkey the tweaked private key.
   */
  static Privkey GetTweakAddPrivateKey(const Privkey& privkey,
                                       const ByteData& tweak);
  /**
   * @brief Parse a Pubkey object to a secp256k1_pubkey struct.
   *
   * @param pubkey the Pubkey object to parse.
   * @return secp256k1_pubkey the generated struct.
   */
  static secp256k1_pubkey ParsePubkey(const Pubkey& pubkey);
  /**
   * @brief Serializes a secp256k1_pubkey struct to a ByteData object.
   *
   * @param pubkey the struct to serialize.
   * @param compressed whether to use the compressed representation.
   * @return ByteData the serialized representation of the public key.
   */
  static ByteData GetSerializedSecPubkeyData(const secp256k1_pubkey& pubkey,
                                             bool compressed);
  /**
   * @brief Get the public key associated with the combined oracle signatures of
   * all the messages for a given outcome.
   *
   * @param oracle_pubkey the public key of the oracle.
   * @param oracle_r_point the R point for the event.
   * @param message the message for the outcome.
   * @return secp256k1_pubkey the public key.
   */
  static secp256k1_pubkey GetSecpCommittedKey(const Pubkey& oracle_pubkey,
                                              const Pubkey& oracle_r_point,
                                              const std::string& message);
  /**
   * @brief Get the secp256k1_context global structure from libwally.
   *
   * @return secp256k1_context* the global context.
   */
  static secp256k1_context* GetSecpContext();
};
}  // namespace dlc
}  // namespace cfd

#endif  // CFD_DLC_INCLUDE_CFDDLC_CFDDLC_UTIL_H_
